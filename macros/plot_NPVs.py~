# =============================================================================
# calc_PU_reweighting.py - This is a macro for taking the data PU data from
#                          lumi POG and comparing it with MC pileup info to
#                          calculate PU reweighting.
# =============================================================================

import ROOT
import os,sys
import copy
import configparser
from math import *

from my_funcs import ScaleToLumi1, makeRatioPlot

# == USEFUL METHODS ===========================================================   

def getHist(plotName, sample_names, hist_files, lumiScales, debug = True):
  
  hOut = {}
  
  ## Go through each year we're interested in.
  for y in years:
    
    ## Get the first sample and the appropriate histogram
    if debug: 
      print("Looking in ", sample_names[0], " for ", plotName, "(20",y,")")
    hOut[y] = hist_files[sample_names[0]][y][0].Get(plotName).Clone()
    if sample_names[0] not in ['JetHT', 'Data']:
      hOut[y].Scale(lumiScales[sample_names[0]][y][0])
    
    ## Add the other samples
    for iS in range(len(sample_names)):
      for fi in range(len(hist_files[sample_names[iS]][y])):
        
        ## Skip the first sample (already grabbed)
        if iS == 0 and fi == 0: continue
        
        h = hist_files[sample_names[iS]][y][fi].Get(plotName).Clone()
        if sample_names[iS] not in ["JetHT", "Data"]:
          scale = lumiScales[sample_names[iS]][y][fi]
          if debug:
            print("Scaling ", sample_names[iS], ", SF = ", scale)
          h.Scale(scale)
        hOut[y].Add(h)
  
  return hOut

# == SETTINGS ===================================================================

# This helps suppress visual output when producing the plots to file
ROOT.gROOT.SetBatch(True)

# Feel free to modify the following settings (if you dare...)
debug = True
years = ['16', '17', '18']
#years = ['18']

dirpath = '../condor_results/2025Mar_PU_no_weight/NONE/'
output_dir = '../plot_results/PU_reweight/2025Mar_no_weight/'  # For Plots

sampleList = [
  'ZJetsToQQ_HT-400to600', 'ZJetsToQQ_HT-600to800',   ## ZJ (400-Inf)
  'ZJetsToQQ_HT-800toInf', "JetHT"
]

categories = [ "ZJ", "JetHT" ]

category_samples = {
  "ZJ": ['ZJetsToQQ_HT-400to600', 'ZJetsToQQ_HT-600to800',         
         'ZJetsToQQ_HT-800toInf'],
  "JetHT": ["JetHT"]
}

config_file = '../Configs/config.ini'
if debug: print("All settings set.")

# == MAIN CODE ============================================================

#################################
## Do not edit below this point
## (unless absolutely necessary)
#################################

if debug: print("Retrieving files and luminosities...")

## Load the config files         
if debug: print(">>> Loading config file...")
cfg = configparser.ConfigParser()
cfg.read(config_file)

## Get the proper lumi scales                        
if debug: print(">>> Loading lumi scales...")
lumiS = {}
for y in years:
  y_good = y
  if (y == '16'): y_good = y + "_comb"
  lumiTmp = float(cfg.get('General','lumi_'+y_good))/1000.0
  lumiTmp = float("%.1f" % lumiTmp)
  lumiS[y] = str(lumiTmp)
if debug: print(">>> lumi scales = ", lumiS)

## Retrieve the proper files and information related to them.          
if debug: print(">>> Retrieving information on samples...")
fileNames = {}
xSecs = {}
lumiScales = {}
histFiles = {}

for s in sampleList:
  
  fileNames[s] = {}
  xSecs[s] = {}
  lumiScales[s] = {}
  histFiles[s] = {}
  
  for y in years:
  
    if debug: print("\nLooking for year 20", y)
    
    ## Get the proper luminosity scale and the files
    ## for the given year (should be only ~1/year)
    lumi = float(cfg.get('General', 'lumi_'+y))
    names = cfg.get(s, 'file_'+y).split(',')
    if debug: print(">>> | ", len(names), " files...")
    
    ## Get other values of interest
    xSecTmps = ['1']*len(names)
    kfactor = ['1']*len(names)
    if s not in ['JetHT', 'Data']:
      xSecTmps = cfg.get(s, 'xSec_'+y).split(',')
    
    ## Get the proper information for this year
    fileNames[s][y] = []
    xSecs[s][y] = []
    histFiles[s][y] = []
    
    for iN in names:
      fileNames[s][y].append(dirpath + '/' + iN)
      histFiles[s][y].append(ROOT.TFile.Open(fileNames[s][y][-1],'READ'))
    
    if debug: print(">>> | xSec = ", xSecTmps)
    for iS in xSecTmps:
      if '*' in iS: iS.split('*')
      if len(iS) == 2:
        xSecs[s][y].append(float(iS[0])*float(iS[1]))
      else:
        xSecs[s][y].append(float(iS))
    
    lumiScales[s][y] = [1]*len(names)
    for iN in range(len(fileNames[s][y])):
      if s not in ['JetHT']:
        print(">>> |", s, y, iN, fileNames[s][y][iN])
        lumiScales[s][y][iN] = ScaleToLumi1(fileNames[s][y][iN],
                  xSecs[s][y][iN], lumi, 'Nevt_all_VbbHcc_boosted')


if debug: print("\n>>> All files retrieved...")

variables = [ "PV_npvsGood", "PV_npvsGood_scaled" ]

for var in variables:

  plots_by_cat = {} 

  # Go through each category
  for cat in categories:
    
    if debug: print(">>> cat = ", cat)
    hist_name = var
    if (cat == "JetHT"):
      hist_name = "PV_npvsGood"
    plots_by_year = getHist(hist_name, category_samples[cat],
                          histFiles, lumiScales)
    
    plots_by_cat[cat] = plots_by_year

  # Go through each year
  for y in years:
  
    print(">>>>>> y = ", y)
      
    # Data plot
    h_data = plots_by_cat["JetHT"][y]
    h_data.Scale(1.0/h_data.Integral())
  
    # MC plot
    h_MC = plots_by_cat["ZJ"][y]
    h_MC.Scale(1.0/h_MC.Integral())

    # Produce the ratio between the two plots
    plots = [h_data.Clone(), h_MC.Clone()]
    plot_names = [ "Data", "Z+jets"]
    canvas_name = var + "_" + y
    
    makeRatioPlot(plots, plot_names, canvas_name, output_dir,
                  "number of good reconstructed primary vertices",
                  [0,99], "Data/MC", False, lumiS[y],
                  colors = [ROOT.kBlack, ROOT.kRed])#,
                  #y_max = y_limits[y])
    print(">>>>>> plot made!")
